; =========================================================
; This file was generated by NSISDialogDesigner 1.4.0.0
; http://coolsoft.altervista.org/nsisdialogdesigner
;
; Do not edit it manually, use NSISDialogDesigner instead!
; =========================================================

; handle variables
Var hCtl_DotNetForm
Var hCtl_DotNetForm_lblStatus
Var hCtl_DotNetForm_lblDescription
Var NextButton


; dialog create function
Function fnc_DotNetForm_Create
  
  ; === DotNetForm (type: Dialog) ===
  nsDialogs::Create 1018
  Pop $hCtl_DotNetForm
  ${If} $hCtl_DotNetForm == error
    Abort
  ${EndIf}
  !insertmacro MUI_HEADER_TEXT "Microsoft .Net Framework" $(MessageDotNetRequires)
  
  ; === lblStatus (type: Label) ===
  ${NSD_CreateLabel} 18.43u 25.23u 250.13u 14.15u ""
  Pop $hCtl_DotNetForm_lblStatus
  
  ; === lblDescription (type: Label) ===
  ${NSD_CreateLabel} 18.43u 11.08u 250.13u 14.15u $(MessageDotNetChecking)
  Pop $hCtl_DotNetForm_lblDescription
  
  GetDlgItem $NextButton $HWNDPARENT 1
  EnableWindow $NextButton 0
  
  GetFunctionAddress $0 CheckAndDownloadDotNet40
  nsDialogs::CreateTimer $0 1000
  
  nsDialogs::Show
FunctionEnd

; dialog show function
Function fnc_DotNetForm_Show
  Call fnc_DotNetForm_Create
FunctionEnd

Function CheckAndDownloadDotNet40
	GetFunctionAddress $0 CheckAndDownloadDotNet40
	nsDialogs::KillTimer $0
	# Let's see if the user has the .NET Framework 4.0 installed on their system or not
	# Remember: you need XP SP3 or Vista or 7.  It is built in to Windows 8, and not needed
	# In case you're wondering, running this code on Windows 8 will correctly return is_equal
	# or is_greater (maybe Microsoft releases .NET 4.0 SP1 for example)
 
	# Set up our Variables
	Var /GLOBAL dotNET40IsThere
	Var /GLOBAL dotNET_CMD_LINE
	Var /GLOBAL EXIT_CODE
 
        # We are reading a version release DWORD that Microsoft says is the documented
        # way to determine if .NET Framework 4.0 is installed
	ReadRegDWORD $dotNET40IsThere HKLM "SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full" "Install"
	IntCmp $dotNET40IsThere 1 is_equal is_less is_greater
 
	is_equal:
		${NSD_SetText} $hCtl_DotNetForm_lblStatus $(MessageDotNetFound)
		;MessageBox MB_OK|MB_ICONEXCLAMATION "installed"
		Goto done_compare_not_needed
	is_greater:
		# Useful if, for example, Microsoft releases .NET 4.0 SP1
		# We want to be able to simply skip install since it's not
		# needed on this system
		${NSD_SetText} $hCtl_DotNetForm_lblStatus $(MessageDotNetFound)
		Goto done_compare_not_needed
	is_less:
		Goto done_compare_needed
 
	done_compare_needed:
		${NSD_SetText} $hCtl_DotNetForm_lblStatus $(MessageDotNetNotFound)
		#.NET Framework 4.0 install is *NEEDED*
 
		# Microsoft Download Center EXE:
		# Web Bootstrapper: http://go.microsoft.com/fwlink/?LinkId=225704
		# Full Download: http://go.microsoft.com/fwlink/?LinkId=225702
 
		# Setup looks for components\dotNET40Full.exe relative to the install EXE location
		# This allows the installer to be placed on a USB stick (for computers without internet connections)
		# If the .NET Framework 4.0 installer is *NOT* found, Setup will connect to Microsoft's website
		# and download it for you
 
		# Reboot Required with these Exit Codes:
		# 1641 or 3010
 
		# Command Line Switches:
		# /showrmui /passive /norestart
 
		# Silent Command Line Switches:
		# /q /norestart
 
 
		# Let's see if the user is doing a Silent install or not
		IfSilent is_quiet is_not_quiet
 
		is_quiet:
			StrCpy $dotNET_CMD_LINE "/q /norestart"
			Goto LookForLocalFile
		is_not_quiet:
			StrCpy $dotNET_CMD_LINE "/showrmui /passive /norestart"
			Goto LookForLocalFile
 
		LookForLocalFile:
			# Let's see if the user stored the Full Installer
			IfFileExists "$EXEPATH\components\dotNET40Full.exe" do_local_install do_network_install
 
			do_local_install:
				# .NET Framework found on the local disk.  Use this copy
				
				${NSD_SetText} $hCtl_DotNetForm_lblStatus "Found local install file, installing..."
				ExecWait '"$EXEPATH\components\dotNET40Full.exe" $dotNET_CMD_LINE' $EXIT_CODE
				Goto is_reboot_requested
 
			# Now, let's Download the .NET
			do_network_install:
				${NSD_SetText} $hCtl_DotNetForm_lblStatus $(MessageDotNetDownloading)
				Var /GLOBAL dotNetDidDownload
				NSISdl::download "http://www.microsoft.com/downloads/info.aspx?na=41&srcfamilyid=0a391abd-25c1-4fc0-919f-b21f31ab88b7&srcdisplaylang=en&u=http%3a%2f%2fdownload.microsoft.com%2fdownload%2f9%2f5%2fA%2f95A9616B-7A37-4AF6-BC36-D6EA96C8DAAE%2fdotNetFx40_Full_x86_x64.exe" "$TEMP\dotNET40Web.exe" $dotNetDidDownload
 
				StrCmp $dotNetDidDownload success fail
				success:
					${NSD_SetText} $hCtl_DotNetForm_lblStatus $(MessageDotNetInstalling)
					ExecWait '"$TEMP\dotNET40Web.exe" $dotNET_CMD_LINE' $EXIT_CODE
					Goto is_reboot_requested
 
				fail:
					${NSD_SetText} $hCtl_DotNetForm_lblStatus $(MessageDotNetFailure)
					Goto done_dotNET_function
 
				# $EXIT_CODE contains the return codes.  1641 and 3010 means a Reboot has been requested
				is_reboot_requested:
					${If} $EXIT_CODE = 1641
					${OrIf} $EXIT_CODE = 3010
						SetRebootFlag true
					${EndIf}
					${NSD_SetText} $hCtl_DotNetForm_lblStatus $(MessageDotNetSuccess)
 
	done_compare_not_needed:
		# Done dotNET Install
		Goto done_dotNET_function
 
	#exit the function
	done_dotNET_function:
		EnableWindow $NextButton 1
FunctionEnd